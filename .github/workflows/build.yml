# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Build and Generate Images

on:
  push:
    branches: [ "main" ]
    tags:
      - v*

  # To remove after tests
  pull_request:
    branches: [ "main" ]

env:
  IMAGE_NAME: identity-api

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Test
      run: dotnet test --no-build --verbosity normal
      env:
        UnitTestUserName: ${{ secrets.UnitTestUserName }}
        UnitTestPassword: ${{ secrets.UnitTestPassword }}
        UnitTestSecret: ${{ secrets.UnitTestSecret }}
        UnitTestValidAudience: ${{ vars.UnitTestValidAudience }}
        UnitTestValidIssuer: ${{ vars.UnitTestValidIssuer }}

    - name: Log into GitHub Container Registry
      run: echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Build and push image to GitHub Container Registry
      run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker build --pull --rm -f "./src/IdentityApi/Dockerfile" -t $IMAGE_ID:$VERSION --platform linux/386 --output type=image,push=true .
          docker build --pull --rm -f "./src/IdentityApi/Dockerfile" -t $IMAGE_ID:$VERSION --platform linux/amd64 --output type=image,push=true .
          docker build --pull --rm -f "./src/IdentityApi/Dockerfile" -t $IMAGE_ID:$VERSION --platform linux/arm64 --output type=image,push=true .
          docker build --pull --rm -f "./src/IdentityApi/Dockerfile" -t $IMAGE_ID:$VERSION --platform linux/arm/v6 --output type=image,push=true .
          docker build --pull --rm -f "./src/IdentityApi/Dockerfile" -t $IMAGE_ID:$VERSION --platform linux/arm/v7 --output type=image,push=true .

