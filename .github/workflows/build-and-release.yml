# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Build and release

on:
  push:
    branches: [ "main" ]
    tags:
      - v*

env:
  IMAGE_NAME: identity-api

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Test
      run: dotnet test --no-build --verbosity normal
      env:
        UnitTestUserName: ${{ secrets.UnitTestUserName }}
        UnitTestPassword: ${{ secrets.UnitTestPassword }}
        UnitTestSecret: ${{ secrets.UnitTestSecret }}
        UnitTestValidAudience: ${{ vars.UnitTestValidAudience }}
        UnitTestValidIssuer: ${{ vars.UnitTestValidIssuer }}

    - name: Install Versionize
      run: dotnet tool install --global Versionize

    - name: Versioning
      id: versionize
      run: versionize --changelog-all --skip-dirty
      continue-on-error: true

    - name: No release required
      if: steps.versionize.outcome != 'success'
      run: echo "Skipping Release. No release required."

    - name: Setup git
      run: |
        git config --local user.email "j.stmichel@xklibursolutions.io"
        git config --local user.name "XkliburSolutions"
        
    - name: Push changes to GitHub
      if: steps.versionize.outcome == 'success'
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}
        tags: true

    - name: "Create release"
      if: steps.versionize.outcome == 'success'
      uses: "actions/github-script@v5"
      with:
        github-token: "${{ secrets.GITHUB_TOKEN }}"
        script: |
          try {
            const tags_url = context.payload.repository.tags_url + "?per_page=1"
            const result = await github.request(tags_url)
            const current_tag = result.data[0].name
            await github.rest.repos.createRelease({
              draft: false,
              generate_release_notes: true,
              name: current_tag,
              owner: context.repo.owner,
              prerelease: false,
              repo: context.repo.repo,
              tag_name: current_tag,
            });
          } catch (error) {
            core.setFailed(error.message);
          }

    - name: Set up QEMU
      if: steps.versionize.outcome == 'success'
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      if: steps.versionize.outcome == 'success'
      uses: docker/setup-buildx-action@v1

    - name: Log into GitHub Container Registry
      if: steps.versionize.outcome == 'success'
      run: echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Build and push image to GitHub Container Registry
      if: steps.versionize.outcome == 'success'
      run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker buildx build --platform linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64 --tag $IMAGE_ID:$VERSION --file ./src/IdentityApi/Dockerfile --output type=image,push=true --annotation "org.opencontainers.image.description=Cet API en C# est conçu pour gérer les fonctionnalités d’authentification, d’inscription et de gestion des identités utilisateurs. Il utilise le framework Microsoft Identity pour fournir une solution robuste et sécurisée." .

